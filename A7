/cards/
  - S1.jpg
  - S2.jpg
  - ...
  - D13.jpg
index.html
script.js
style.css

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drag and Drop Card Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Drag and Drop Card Game</h1>
    <button id="dealButton">Deal Cards</button>
    <div id="gameArea">
        <div id="deck">Deck</div>
        <div id="discardPile">Discard Pile</div>
        <div id="cardArea"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    text-align: center;
}

#gameArea {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

#deck, #discardPile {
    border: 2px dashed #aaa;
    padding: 20px;
    width: 150px;
    height: 200px;
    margin: 0 20px;
    text-align: center;
    line-height: 200px;
    font-weight: bold;
    color: #666;
}

#cardArea {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    width: 400px;
    gap: 10px;
}

.card {
    width: 80px;
    height: 120px;
    background-size: cover;
    cursor: grab;
}

document.addEventListener("DOMContentLoaded", () => {
    const deck = document.getElementById("deck");
    const discardPile = document.getElementById("discardPile");
    const cardArea = document.getElementById("cardArea");
    const dealButton = document.getElementById("dealButton");

    // List of card names
    const suits = ['S', 'H', 'D', 'C'];
    const cards = suits.flatMap(suit => Array.from({ length: 13 }, (_, i) => `${suit}${i + 1}.jpg`));
    let dealtCards = [];

    // Function to deal cards
    dealButton.addEventListener("click", () => {
        cardArea.innerHTML = ""; // Clear previous cards
        dealtCards = []; // Reset dealt cards

        while (dealtCards.length < 5) {
            const randomIndex = Math.floor(Math.random() * cards.length);
            const card = cards[randomIndex];
            if (!dealtCards.includes(card)) {
                dealtCards.push(card);
                const cardElement = document.createElement("div");
                cardElement.className = "card";
                cardElement.style.backgroundImage = `url('./cards/${card}')`;
                cardElement.draggable = true;

                // Add drag events
                cardElement.addEventListener("dragstart", e => {
                    e.dataTransfer.setData("text/plain", card);
                });

                cardArea.appendChild(cardElement);
            }
        }
    });

    // Make deck and discard pile droppable
    [deck, discardPile].forEach(pile => {
        pile.addEventListener("dragover", e => e.preventDefault());
        pile.addEventListener("drop", e => {
            e.preventDefault();
            const card = e.dataTransfer.getData("text/plain");
            alert(`Card ${card} was discarded to ${pile.id}`);
        });
    });
});
